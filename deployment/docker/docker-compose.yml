version: '3.8'

services:
  # Main consensus node
  geometric-consensus:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    image: geometric-consensus:latest
    container_name: geometric-consensus-main
    ports:
      - "8080:8080"  # HTTP API
      - "9090:9090"  # Consensus protocol
      - "9091:9091"  # P2P communication
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - BIND_ADDRESS=0.0.0.0
      - HTTP_PORT=8080
      - CONSENSUS_PORT=9090
      - P2P_PORT=9091
      - MAX_STEPS=14
      - CONSENSUS_TYPE=TETRAHEDRON
      - PEER_DISCOVERY=docker
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    volumes:
      - consensus-data:/app/data
      - consensus-logs:/app/logs
      - ./config:/app/config:ro
    networks:
      - consensus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Consensus node 2
  geometric-consensus-2:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    image: geometric-consensus:latest
    container_name: geometric-consensus-2
    ports:
      - "8081:8080"
      - "9092:9090"
      - "9093:9091"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - BIND_ADDRESS=0.0.0.0
      - HTTP_PORT=8080
      - CONSENSUS_PORT=9090
      - P2P_PORT=9091
      - MAX_STEPS=14
      - CONSENSUS_TYPE=TETRAHEDRON
      - PEER_DISCOVERY=docker
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    volumes:
      - consensus-data-2:/app/data
      - consensus-logs-2:/app/logs
      - ./config:/app/config:ro
    networks:
      - consensus-network
    restart: unless-stopped
    depends_on:
      - geometric-consensus

  # Consensus node 3
  geometric-consensus-3:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    image: geometric-consensus:latest
    container_name: geometric-consensus-3
    ports:
      - "8082:8080"
      - "9094:9090"
      - "9095:9091"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - BIND_ADDRESS=0.0.0.0
      - HTTP_PORT=8080
      - CONSENSUS_PORT=9090
      - P2P_PORT=9091
      - MAX_STEPS=14
      - CONSENSUS_TYPE=TETRAHEDRON
      - PEER_DISCOVERY=docker
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    volumes:
      - consensus-data-3:/app/data
      - consensus-logs-3:/app/logs
      - ./config:/app/config:ro
    networks:
      - consensus-network
    restart: unless-stopped
    depends_on:
      - geometric-consensus

  # Consensus node 4
  geometric-consensus-4:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile
    image: geometric-consensus:latest
    container_name: geometric-consensus-4
    ports:
      - "8083:8080"
      - "9096:9090"
      - "9097:9091"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - BIND_ADDRESS=0.0.0.0
      - HTTP_PORT=8080
      - CONSENSUS_PORT=9090
      - P2P_PORT=9091
      - MAX_STEPS=14
      - CONSENSUS_TYPE=TETRAHEDRON
      - PEER_DISCOVERY=docker
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    volumes:
      - consensus-data-4:/app/data
      - consensus-logs-4:/app/logs
      - ./config:/app/config:ro
    networks:
      - consensus-network
    restart: unless-stopped
    depends_on:
      - geometric-consensus

  # Load balancer
  nginx:
    image: nginx:alpine
    container_name: geometric-consensus-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - consensus-network
    restart: unless-stopped
    depends_on:
      - geometric-consensus
      - geometric-consensus-2
      - geometric-consensus-3
      - geometric-consensus-4

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: geometric-consensus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - consensus-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: geometric-consensus-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - consensus-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false

  # Redis for caching
  redis:
    image: redis:alpine
    container_name: geometric-consensus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - consensus-network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  consensus-data:
    driver: local
  consensus-data-2:
    driver: local
  consensus-data-3:
    driver: local
  consensus-data-4:
    driver: local
  consensus-logs:
    driver: local
  consensus-logs-2:
    driver: local
  consensus-logs-3:
    driver: local
  consensus-logs-4:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  redis-data:
    driver: local

networks:
  consensus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

